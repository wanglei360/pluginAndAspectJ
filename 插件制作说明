new
创建插件：
1：创建一个空的module，只保留类和空的build.gradle
2：编写插件：随便创建一个类
    public class DemoPlugins implements Plugin<Project> {
        @Override public void apply(Project project) {
            System.out.println("GreetingStandaloneGradlePlugins(standalone) ---> apply");
        }
    }
3：编写build.gradle,参照pluginDemo中编写即可，都有注释
4：生成插件：Gradle->pluginDemo(插件module名字)->Tasks->publishing->publish,即可生成插件

使用插件：
1：根目录settings.gradle-> pluginManagement添加代码块
    resolutionStrategy {
            eachPlugin {
                //todo 如果是指定的groupId
                if (requested.id.namespace == 'lugins') {
                    // groupId:artifactId:version
                    useModule("${requested.id.namespace}:${requested.id.name}:${requested.version}")
                }
            }
        }
    在pluginManagement ->repositories 添加maven引入
        maven {
            //这里是当前根目录下的plugDemo文件夹
            url = "../pluginAndAspectJ/plugDemo"
        }
2：在使用插件的module中的build.gradle->plugins中添加以下代码
    // 对应的是插件module中build.gradle中的'groupId.artifactId'  version 'version'
    id 'lugins.dalone' version '1.0.0'

检查是否成功：
Gradle->app(使用插件的module名字)->Tasks->build->build
点击后就能在as的Build窗口中看到上面DemoPlugins类中打印的内容了








old
1:创建一个 module
2:只留下 src/main文件夹 和 build.gradle,其它都删除
3:删除 build.gradle 里面所有的内容，然后填写以下内容,然后点击右上角的Sync Now
        apply plugin: 'groovy'
        apply plugin: 'maven'

        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"

        buildscript {
            repositories {
                mavenCentral()
            }
        }

        repositories {
            mavenCentral()
        }

        dependencies {
            implementation localGroovy()
            implementation gradleApi()
            //以下为自己需要用到的导包
            implementation 'com.android.tools.build:gradle:3.4.2'
            implementation 'org.aspectj:aspectjtools:1.8.9'
            implementation 'org.aspectj:aspectjrt:1.9.3'
        }
        group = 'com.myplugin'  // 组名
        version = '1.0.0' // 版本

        //打包到本地或上传远程maven库
        uploadArchives {
            repositories {
                mavenDeployer {
                    //提交到远程maven库
                    //repository(url: uri('')){
                    //     authentication(userName:'', password:'')//远程maven库的用户名和密码
                    //}
                    //提交到本地maven地址
                    repository(url: uri('../plug'))//这里就是指定位置，要全路径名
                    pom.groupId = 'com.myplugin' // 组名
                    pom.artifactId = 'MyGroovyPugin' // 插件名
                    pom.version = '1.0.0' // 版本号
                }
            }
        }
4:在main 目录下创建 groovy 文件夹，在该文件夹下创建的包名和.groovy文件

    import org.gradle.api.Plugin//导包不能错了
    import org.gradle.api.Project
    public class MyGroovyPugin implements Plugin<Project> {
        @Override
        void apply(Project project) {//要重写这个方法
            System.out.println("-------------")
            System.out.println("内容")
            System.out.println("-------------")
        }
    }

5:在 main 目录下创建 resources -> META-INF -> gradle-plugins 文件夹，最后在 gradle-plugins
    文件夹下创建一个 MyGroovyPugin.properties 文件，在该文件中填写
    implementation-class=com.myPlugin.MyGroovyPugin//groovy文件的包名+文件名
    todo:这里的.properties之前的名字就是app下的 build.gradle 中引入时的名字,例如：apply plugin: ‘MyGroovyPlugin’

6:点击右侧Gradle->module名字->Tasks->upload->uploadArchives,就会在第40行指定位置生成一个插件。
7:使用该插件的方法：
    1:在项目的build.gradle中的buildscript->repositories下添加maven引入
        maven{
           url uri('/Users/wanglei/Downloads/MyApplication/custom_pugin_and_aspectj/plug')
        }
    2：继续在该文件下的dependencies中添加引入
      //格式为：group:插件名:version，之前在写插件时的build.gradle中有寻找这些内容
      classpath 'cn.my_plugin:MyGroovyPlugin:1.0.0'
    3：app下的build.gradle中添加对该插件的引用，如：apply plugin: 'MyGroovyPlugin'

8:
9:






